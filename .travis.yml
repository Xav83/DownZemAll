# https://docs.travis-ci.com/

#---------------------------------#
#      general configuration      #
#---------------------------------#
# language: generic # VM have more languages and services available
# language: minimal # VM optimized be faster and use less disk space, 
language: cpp
sudo: true

# branches to build
branches:
  # whitelist
  only:
    - master
    - develop
    - production
    - /^v\d*\.\d*\.\d*$/
    - /^travis.*$/

  # blacklist
  except:
    - /^appveyor.*$/


#---------------------------------#
#               jobs              #
#---------------------------------#
# build and tests OK with Qt version 5.7.1
# build and tests OK with GNU C++ Compiler version 5.3.0
# build and tests OK with CMake version 3.11.1

# Travis-CI:
#  - GNU C++ Compiler version 5 works on Precise and Trusty
#  - Precise ships with CMake 2.8.7
#  - Trusty ships with CMake 3.9.2
#  - Xenial ships with CMake 3.12.4    => Use Xenial

matrix:
  include:
    - os: linux
      dist: xenial
      env: QT_BASE=56 CXX_COMPILER=g++-5 C_COMPILER=gcc-5 BUILD_TYPE=Release
      addons:
        apt:
          sources:
          - ubuntu-toolchain-r-test
          packages:
          - gcc-5
          - g++-5

#---------------------------------#
#    environment configuration    #
#---------------------------------#

before_install:
  - sudo add-apt-repository --yes ppa:ubuntu-sdk-team/ppa
  - if [ "$QT_BASE" = "56"  ]; then sudo add-apt-repository ppa:beineri/opt-qt562-xenial -y; fi
  - sudo apt-get update -qq


install:
  - sudo apt-get install -qq mesa-common-dev libglu1-mesa-dev
  - if [ "$QT_BASE" = "56"  ]; then sudo apt-get install -qq qt56base qt56multimedia qt56translations qt56tools ; source /opt/qt56/bin/qt56-env.sh ; export QTHOME=/opt/qt56 ; fi

  # read the content of the file ./version
  - AppVersion=`cat version`
  - echo "Application Version = ${AppVersion}"

  - echo "TRAVIS_TAG = '${TRAVIS_TAG}'"
  - echo "TRAVIS_BRANCH = '${TRAVIS_BRANCH}'"

  - GCCDumpMachine=`gcc -dumpmachine`
  - GPPDumpMachine=`g++ -dumpmachine`
  - echo "GCC Dump Machine = '${GCCDumpMachine}'"  # x86_64-linux-gnu
  - echo "G++ Dump Machine = '${GPPDumpMachine}'"  # x86_64-linux-gnu
  - CpuArchitecture=${GCCDumpMachine%"-linux-gnu"} # remove suffix
  - echo "CpuArchitecture = '${CpuArchitecture}'"  # x86_64

  - echo "Boost"
#  - sudo apt-get install libboost-all-dev # Not good : may install wrong version libboost-all-1.54.0
#  - whereis boost # /usr/include/boost

  - echo "Downloading Boost..."
  - curl --location --output ./3rd/boost/1.77.0/unix/boost_1_77_0.tar.bz2 https://boostorg.jfrog.io/artifactory/main/release/1.77.0/source/boost_1_77_0.tar.bz2
    # curl -L, --location: in case there is a redirect found

  - echo "Installing Boost..."
# Current Directory = /home/travis/build/setvisible/DownZemAll
  - MY_BOOST_DIR="$HOME/boost_1_77_0"
  - echo "Extracting Boost archive to ${MY_BOOST_DIR}..."
  - mkdir ${MY_BOOST_DIR}
  - tar --bzip2 -x -f ./3rd/boost/1.77.0/unix/boost_1_77_0.tar.bz2 -C ${MY_BOOST_DIR}
#  - echo "Add Boost to environment PATH..."
#  - export PATH="$PATH:${MY_BOOST_DIR}/boost_1_77_0"


# split all with ':' in PATH and echo each line so that it's easier to read
  - echo PATH =
  - for i in `sed 's/:/\n/g' <<< "$PATH"`; do echo $i; done


#---------------------------------#
#       build configuration       #
#---------------------------------#

before_script:
# Current Directory = /home/travis/build/setvisible/DownZemAll
  - mkdir ./../build-cmake
  - cd ./../build-cmake


script:
  - cmake --version             # cmake version 3.9.2
  - ${CXX_COMPILER} --version   # g++-5 (Ubuntu 5.5.0-12ubuntu1~14.04) 5.5.0 20171010
  - ${C_COMPILER} --version     # gcc-5 (Ubuntu 5.5.0-12ubuntu1~14.04) 5.5.0 20171010
  - cmake ./../DownZemAll -DCMAKE_CXX_COMPILER=${CXX_COMPILER}
      -DCMAKE_C_COMPILER=${C_COMPILER}
      -DCMAKE_BUILD_TYPE=${BUILD_TYPE}
      -DCMAKE_INSTALL_PREFIX="./../install-DownZemAll-cmake"
      -DENABLE_TESTS=ON
      -DBOOST_ROOT:PATH=${MY_BOOST_DIR}/boost_1_77_0
  - cmake --build .

#---------------------------------#
#            tests                #
#---------------------------------#

# to run your custom scripts instead of automatic tests
#test_script:
  - ctest --version
  - ctest -N                # -N gets the list of all the tests in CTest
  - ctest . --verbose       # <verbose> shows all the test methods


#---------------------------------#
#           archives              #
#---------------------------------#

# scripts to run after tests
#after_test:
  - cmake --build . --target install

  - strip "./../install-DownZemAll-cmake/DownZemAll"

#---------------------------------#
#      artifacts configuration    #
#---------------------------------#
# archiving
  - mkdir -p ./../Distrib
  - cd ./../Distrib

  - FILE_NAME="DownZemAll_v${AppVersion}_${CpuArchitecture}"   # ex: DownZemAll_v1.2.0_x86_64

# creating tarball
# ================
  - TARBALL_NAME="${FILE_NAME}.tar.gz"
  - tar -zcvf ${TARBALL_NAME} -C ./../install-DownZemAll-cmake .


# creating AppImage
# =================
# *** Note that AppImage can only run DownZemAll.
# *** In other words the launcher cannot be used here.
# *** So the filename is suffixed with mention '_no_launcher'
  - APPIMAGE_NAME="${FILE_NAME}_no_launcher.AppImage"

#   Setup
  - mkdir -p ./../appimage-build
  - cd ./../appimage-build
  - cp ./../DownZemAll/installer/unix/appimage/tools/linuxdeploy-x86_64.AppImage .
  - cp ./../DownZemAll/installer/unix/appimage/tools/appimagetool-x86_64.AppImage .
  - chmod +x *.AppImage
  - mkdir -p AppDir
  - test -d AppDir || echo "ERROR - could not create AppImage archive."

#   Deploy
  - ./linuxdeploy-x86_64.AppImage
      --appdir AppDir
      -e ./../install-DownZemAll-cmake/DownZemAll
      -d ./../DownZemAll/installer/unix/appimage/DownZemAll.desktop
      -i ./../DownZemAll/installer/unix/appimage/DownZemAll.svg

#   Other files must be added manually :(
  - cp ./../install-DownZemAll-cmake/LICENSE ./AppDir/usr/bin/
  - cp ./../install-DownZemAll-cmake/TROUBLESHOOTING.md ./AppDir/usr/bin/
  - cp ./../install-DownZemAll-cmake/yt-dlp ./AppDir/usr/bin/
  - mkdir -p ./AppDir/usr/bin/locale
  - cp ./../install-DownZemAll-cmake/locale/* ./AppDir/usr/bin/locale/

#   Build
  - ./appimagetool-x86_64.AppImage AppDir
  - mv ./DownZemAll-x86_64.AppImage "./../Distrib/${APPIMAGE_NAME}"


  - cd ./../Distrib


#---------------------------------#
#     deployment configuration    #
#---------------------------------#

#before_deploy:

deploy:
  provider: releases
  api_key: $TOKEN       # Set in the settings page of your repository, as a secure variable
  file_glob: true       # Enable wildcard pattern
  file:
    - "*.tar.gz"
    - "*.AppImage"
  skip_cleanup: true
  draft: true           # Draft Release 
  prerelease: false
  on:
    branch: master      # release from master branch only
    tags: true          # deploy on tag push only

#after_deploy:


after_success:
  - echo "success"
 
after_failure:
  - echo "failure"

