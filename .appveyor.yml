# https://www.appveyor.com/docs/appveyor-yml/

# Notes:
#   - Minimal appveyor.yml file is an empty file. All sections are optional.
#   - Indent each level of configuration with 2 spaces. Do not use tabs!
#   - All section names are case-sensitive.
#   - Section names should be unique on each level.

#---------------------------------#
#      general configuration      #
#---------------------------------#

# version format in appveyor
version: 'build_{build}-{branch}'

# you can use {branch} name in version format too
# version: 1.0.{build}-{branch}

pull_requests:
  do_not_increment_build_number: true

# branches to build
branches:
  # whitelist
  only:
    - develop
    - master
    - production
    - /v\d*\.\d*\.\d*/
    - /^appveyor.*$/

  # blacklist
  except:
    - /^travis.*$/

# Do not build on tags (GitHub and BitBucket)
#skip_tags: true

# Start builds on tags only (GitHub and BitBucket)
#skip_non_tags: true

# Skipping commits with particular message or from specific user
#skip_commits:
#  message: /Created.*\.(png|jpg|jpeg|bmp|gif)/      # Regex for matching commit message
#  author: John                                      # Commit author's username, name, email or regexp maching one of these.

# Including commits with particular message or from specific user
#only_commits:
#  message: /build/                # Start a new build if message contains 'build'
#  author: jack@company.com        # Start a new build for commit of user with email jack@company.com

# Skipping commits affecting specific files (GitHub only). More details here: /docs/appveyor-yml
#skip_commits:
#  files:
#    - docs/*
#    - '**/*.html'

# Including commits affecting specific files (GitHub only). More details here: /docs/appveyor-yml
#only_commits:
#  files:
#    - Project-A/
#    - Project-B/

# Do not build feature branch with open Pull Requests
#skip_branch_with_pr: true

# Maximum number of concurrent jobs for the project
max_jobs: 4

#---------------------------------#
#    environment configuration    #
#---------------------------------#

# Build worker image (VM template)
image: Visual Studio 2017

# scripts that are called at very beginning, before repo cloning
init:
  - git config --global core.autocrlf input
  # # go to hell Xamarin (see http://help.appveyor.com/discussions/problems/4569)
  #- del "C:\Program Files (x86)\MSBuild\14.0\Microsoft.Common.targets\ImportAfter\Xamarin.Common.targets"

# clone directory
clone_folder: c:\projects\DownZemAll

# fetch repository as zip archive
shallow_clone: true                 # default is "false"

# set clone depth
clone_depth: 5                      # clone entire repository history if not defined

# setting up etc\hosts file
#hosts:
#  queue-server: 127.0.0.1
#  db.server.com: 127.0.0.2

# custom environment variables
#  my_var1: value1
#  my_var2: value2
#  # this is how to set encrypted variable. Go to "Settings" -> "Encrypt YAML" page in account menu to encrypt data.
#  my_secure_var1:
#    secure: FW3tJ3fMncxvs58/ifSP7w==
#
# environment:
#  global:
#    connection_string: server=12;password=13;
#    service_url: https://127.0.0.1:8090
#
#  matrix:
#  - db: mysql
#    provider: mysql
#
#  - db: mssql
#    provider: mssql
#    password:
#      secure: $#(JFDA)jQ@#$



# this is how to allow failing jobs in the matrix
environment:
  matrix:
    - COMPILER: mingw
      CMAKE_GENERATOR: "MinGW Makefiles"
      QT5: C:\Qt\5.13.2\mingw73_32
      PLATFORM: x86
      CONFIGURATION: Release

    - COMPILER: mingw
      CMAKE_GENERATOR: "MinGW Makefiles"
      QT5: C:\Qt\5.13.2\mingw73_64
      PLATFORM: x64
      CONFIGURATION: Release

    - COMPILER: msvc
      CMAKE_GENERATOR: "Visual Studio 15 2017"
      QT5: C:\Qt\5.13.2\msvc2017
      PLATFORM: x86
      CONFIGURATION: Release

    - COMPILER: msvc
      CMAKE_GENERATOR: "Visual Studio 15 2017 Win64"
      QT5: C:\Qt\5.13.2\msvc2017_64
      PLATFORM: x64
      CONFIGURATION: Release

# todo: LLVM (PATH is C:\Program Files\LLVM\bin)


# this is how to allow failing jobs in the matrix
matrix:
  fast_finish: true     # set this flag to immediately finish build once one of the jobs fails.
  allow_failures:
#    - COMPILER: mingw
    - CONFIGURATION: Debug

# exclude configuration from the matrix. Works similarly to 'allow_failures' 
# but build not even being started for excluded combination.
#  exclude:
#    - PLATFORM: x86
#      CONFIGURATION: Debug

#  MSBUILD_FLAGS: /verbosity:minimal /maxcpucount
#


# build cache to preserve files/folders between builds
#cache:
#  - packages -> **\packages.config  # preserve "packages" directory in the root of build folder
#                                    # but will reset it if packages.config is modified
#  - projectA\libs
#  - node_modules                    # local npm modules
#  - '%LocalAppData%\NuGet\Cache'    # NuGet < v3
#  - '%LocalAppData%\NuGet\v3-cache' # NuGet v3

# enable service required for build/tests
#services:
#  - mssql2014           # start SQL Server 2014 Express
#  - mssql2014rs         # start SQL Server 2014 Express and Reporting Services
#  - mssql2012sp1        # start SQL Server 2012 SP1 Express
#  - mssql2012sp1rs      # start SQL Server 2012 SP1 Express and Reporting Services
#  - mssql2008r2sp2      # start SQL Server 2008 R2 SP2 Express
#  - mssql2008r2sp2rs    # start SQL Server 2008 R2 SP2 Express and Reporting Services
#  - mysql               # start MySQL 5.6 service
#  - postgresql          # start PostgreSQL 9.5 service
#  - iis                 # start IIS
#  - msmq                # start Queuing services
#  - mongodb             # start MongoDB

# scripts that run after cloning repository
install:
#  # by default, all script lines are interpreted as batch
#  - echo This is batch
#  # to run script as a PowerShell command prepend it with ps:
#  - ps: Write-Host 'This is PowerShell'
#  # batch commands start from cmd:
#  - cmd: echo This is batch again
#  - cmd: set MY_VAR=12345

  - set QTDIR=%QT5%
  - set Qt5_DIR=%QT5%\lib\cmake\Qt5
  - if "%PLATFORM%"=="x86" (set MINGW_TOOL_DIR=C:\Qt\Tools\mingw730_32\bin\)
      else (set MINGW_TOOL_DIR=C:\Qt\Tools\mingw730_64\bin\)
  - if [%COMPILER%]==[mingw] set PATH=%PATH%;%MINGW_TOOL_DIR%

#  - dir "%QTDIR%"
#  - dir "%Qt5_DIR%"

  #
  #- if [%COMPILER%]==[mingw] set PATH=%PATH%;C:\Qt\Tools\mingw730_64\bin\
  #- set PATH=%PATH%;C:\Qt\5.7\mingw53_32\bin\
  #- set PATH=%PATH%;C:\Qt\5.7\mingw53_32\plugins\
  - echo COMPILER = "%COMPILER%"
  - echo QTDIR = %QTDIR%  
  - echo Qt5_DIR = %Qt5_DIR%  


  - echo "Using pre-installed Boost"
  - set FINAL_BOOST_DIR="C:\Libraries\boost_1_77_0"

#   - echo "Installing Boost..."
#   # Rem: do not use default Boost in PATH that is in 1.77.0 version
#   # Current Directory = C:\projects\DownZemAll
#   - set MY_BOOST_DIR="C:\projects\boost_1_77_0"
#   - echo "Extracting Boost archive to %MY_BOOST_DIR% ..."
#   - mkdir %MY_BOOST_DIR% -f
#   - 7z x .\3rd\boost\1.77.0\windows\boost_1_77_0.7z -o%MY_BOOST_DIR%
# #  - echo "Add Boost to environment PATH..."
# #  - set PATH=%PATH%;%MY_BOOST_DIR%\boost_1_77_0
#   - set FINAL_BOOST_DIR="%MY_BOOST_DIR%\boost_1_77_0"
  - echo Boost Root Dir = %FINAL_BOOST_DIR%


  # replace all ';' by '\n' in PATH so that it's easier to read
  - echo PATH = & echo.    %PATH:;= & echo.    %  

  # Rename sh.exe as sh2.exe otherwise its PATH interferes with MinGW
  - rename "C:\Program Files\Git\usr\bin\sh.exe" "sh2.exe"

  # read the content of the file ./version
  - set /p AppVersion=<version
  - echo Application Version = %AppVersion%

# Versions of G++ and GCC:
#  - gcc.exe -dumpmachine > tmp
#  - set /p GCCDumpMachine=<tmp
#  - g++.exe -dumpmachine > tmp
#  - set /p GPPDumpMachine=<tmp
#  - echo "GCC Dump Machine = '${GCCDumpMachine}'"
#  - echo "G++ Dump Machine = '${GPPDumpMachine}'"

#  - if [%COMPILER%]==[MinGW] set PATH=C:\MinGW\bin;%PATH%
#  - if [%COMPILER%]==[MinGW] mingw-get update


# enable patching of AssemblyInfo.* files
#assembly_info:
#  patch: true
#  file: AssemblyInfo.*
#  assembly_version: "2.2.{build}"
#  assembly_file_version: "{version}"
#  assembly_informational_version: "{version}"

# Automatically register private account and/or project AppVeyor NuGet feeds.
#nuget:
#  account_feed: true
#  project_feed: true
#  disable_publish_on_pr: true     # disable publishing of .nupkg artifacts to account/project feeds for pull request builds
#  publish_wap_octopus: true       # disable publishing of Octopus Deploy .nupkg artifacts to account/project feeds


#---------------------------------#
#       build configuration       #
#---------------------------------#

# add several platforms to build matrix (build platform, i.e. x86, x64, Any CPU. This setting is optional.)
#platform:
#  - x86
#  - x64


# add several configurations to build matrix (Debug, Release, RelWithDebInfo, etc.)
#configuration:
#  - Release


# Build settings, not to be confused with "before_build" and "after_build".
# "project" is relative to the original build directory and not influenced by directory changes in "before_build".
#build:
#  parallel: true                  # enable MSBuild parallel builds
#  project: MyTestAzureCS.sln      # path to Visual Studio solution or project
#  publish_wap: true               # package Web Application Projects (WAP) for Web Deploy
#  publish_wap_xcopy: true         # package Web Application Projects (WAP) for XCopy deployment
#  publish_wap_beanstalk: true     # Package Web Applications for AWS Elastic Beanstalk deployment
#  publish_wap_octopus: true       # Package Web Applications for Octopus deployment
#  publish_azure_webjob: true      # Package Azure WebJobs for Zip Push deployment
#  publish_azure: true             # package Azure Cloud Service projects and push to artifacts
#  publish_aspnet_core: true       # Package ASP.NET Core projects
#  publish_core_console: true      # Package .NET Core console projects
#  publish_nuget: true             # package projects with .nuspec files and push to artifacts
#  publish_nuget_symbols: true     # generate and publish NuGet symbol packages
#  include_nuget_references: true  # add -IncludeReferencedProjects option while packaging NuGet artifacts
#  verbosity: minimal              # MSBuild verbosity level (quiet|minimal|normal|detailed)
build:
  verbosity: minimal


# scripts to run before build
before_build:
  # Current Directory = C:\projects\DownZemAll
  - mkdir ".\..\build-cmake" -f
  - cd ".\..\build-cmake"

# to run your custom scripts instead of automatic MSBuild
build_script:
  - echo ****************************************************
  - echo Building executables (application and tests)
  - echo ****************************************************
#  - if "%platform%"=="x86" (set CMAKE_GENERATOR_PLATFORM="Win32")
#      else (set CMAKE_GENERATOR_PLATFORM="%PLATFORM%")


#  - echo "PLATFORM = %PLATFORM%"
#  - echo "CMAKE_GENERATOR_PLATFORM = %CMAKE_GENERATOR_PLATFORM%"


     # -DCMAKE_CONFIGURATION_TYPES="%CONFIGURATION%"
     # -A "%CMAKE_GENERATOR_PLATFORM%"

  - cmake --version         # version 3.15.5
  - cmake .\..\DownZemAll -G "%CMAKE_GENERATOR%"
      -DCMAKE_PREFIX_PATH="%QT5%"
      -DCMAKE_INSTALL_PREFIX=".\..\install-DownZemAll-cmake"
      -DENABLE_TESTS=ON
      -DBOOST_ROOT:PATH=%FINAL_BOOST_DIR%

# To build a release with MSVC, there's no command in CMAKE. So use cmake --build . --config Release
  - cmake --build . --config Release  


# scripts to run after build (working directory and environment changes are 
# persisted from the previous steps)
after_build:

# scripts to run *after* solution is built and *before* automatic packaging 
# occurs (web apps, NuGet packages, Azure Cloud Services)
before_package:

# to disable automatic builds
# build: off

#---------------------------------#
#       tests configuration       #
#---------------------------------#

# to run tests against only selected assemblies and/or categories
test:
#  assemblies:
#    only:
#      - asm1.dll
#      - asm2.dll
#
#  categories:
#    only:
#      - UI
#      - E2E

# to run tests against all except selected assemblies and/or categories
#test:
#  assemblies:
#    except:
#      - asm1.dll
#      - asm2.dll
#
#  categories:
#    except:
#      - UI
#      - E2E

# to run tests from different categories as separate jobs in parallel
#test:
#  categories:
#    - A            # A category common for all jobs
#    - [UI]         # 1st job
#    - [DAL, BL]    # 2nd job

#---------------------------------#
#            tests                #
#---------------------------------#

# scripts to run before tests (working directory and environment changes
# are persisted from the previous steps such as "before_build")
before_test:

# to run your custom scripts instead of automatic tests
test_script:
  - ctest --version
  - ctest -N                        # -N gets the list of all the tests in CTest
  - ctest . --verbose --output-on-failure -C Release  # <verbose> shows all the test methods


#---------------------------------#
#           archives              #
#---------------------------------#

# scripts to run after tests
after_test:
  - cmake --build . --config Release --target install
  - mkdir C:\projects\DownZemAll\bin
  - cd C:\projects\DownZemAll\bin

# zip the files
# DownZemAll_v1.2.0_windows-mingw-x86.zip
# DownZemAll_v1.2.0_windows-mingw-x64.zip
# DownZemAll_v1.2.0_windows-msvc-x86.zip
# DownZemAll_v1.2.0_windows-msvc-x64.zip
# DownZemAll_v1.2.0_x86_64-linux-gnu.tar.gz
  - set ZIP_FILE="DownZemAll_v%AppVersion%_windows-%COMPILER%-%PLATFORM%.zip"
  - 7z a %ZIP_FILE% .\..\..\install-DownZemAll-cmake\*

# make the browser addons
  - cd C:\projects\DownZemAll\web-extension\extension
  - .\make.bat --output-directory .
  - cd C:\projects\DownZemAll\bin

# DownRightNow_webextension_firefox_v1.2.0.xpi
  - set ZIP_FIREFOX_WEB_EXTENSION="DownRightNow_firefox_v%AppVersion%.xpi"
  - 7z a %ZIP_FIREFOX_WEB_EXTENSION% .\..\web-extension\extension\firefox\*

# DownRightNow_webextension_chromium_v1.2.0.zip
  - set ZIP_CHROMIUM_WEB_EXTENSION="DownRightNow_chromium_v%AppVersion%.zip"
  - 7z a %ZIP_CHROMIUM_WEB_EXTENSION% .\..\web-extension\extension\chromium\*

# compile NSIS to build setup32 and setup64.
# Rem: no version mentioned:
# DownZemAll_x86_Setup.exe
# DownZemAll_x64_Setup.exe
  - if [%COMPILER%]==[mingw] (
      makensis 
          /DPATH_OUT="C:\projects\DownZemAll\bin"
          /DVERSION="%AppVersion%" 
          /DPLATFORM="%PLATFORM%" 
          /DBIN_PATH="C:\projects\install-DownZemAll-cmake" 
          C:\projects\DownZemAll\installer\windows\NSIS\setup.nsi &&
      rename "DownZemAllSetup.exe" "DownZemAll_%PLATFORM%_Setup.exe"
    ) else (
      echo Disable installer build. NSIS not invoked.
    )


# to disable automatic tests
# test: off

#---------------------------------#
#    artifacts configuration      #
#---------------------------------#

artifacts: 
   # pushing *.zip and *.xpi files in install directory
  - path: 'bin\*.*'
    name: myartifacts

#  # pushing a single file
#  - 'path: C:\projects\*.zip'
#
#  # pushing a single file with environment variable in path and "Deployment name" specified
#  - path: MyProject\bin\$(configuration)
#    name: myapp
#
#  # pushing entire folder as a zip archive
#  - path: logs
#
#  # pushing all *.nupkg files in build directory recursively
#  - path: '**\*.nupkg'


#---------------------------------#
#     deployment configuration    #
#---------------------------------#

# HOW-TO GITHUB
# 1. Add new tag in local repo.
# 2. Push tag to GitHub repo and start a new AppVeyor build.
# 3. AppVeyor creates a new (draft) release based on that tag and uploads artifacts.


# providers: Local, FTP, WebDeploy, AzureCS, AzureBlob, S3, NuGet, Environment
# provider names are case-sensitive!
deploy:
  - provider: GitHub
    tag: v%AppVersion%
    release: DownZemAll v%AppVersion%
    # mandatory description (use '' if any) otherwise GitHub  "422: Unprocessable entity" error
    description: 'Draft release of DownZemAll version %AppVersion% (build $(appveyor_build_version))' 
    auth_token:
      secure: J6XN9EP9btStQKZRRhB69DkQQHQ32ioCje4YV9jfK1Xvm/1w2r6lppsT2hBHvowk
    artifact: myartifacts
    draft: true
    prerelease: false
#    force_update: true
    on:
#      branch: master                # release from master branch only
      appveyor_repo_tag: true       # deploy on tag push only

#     # FTP deployment provider settings
#   - provider: FTP
#     protocol: ftp|ftps|sftp
#     host: ftp.myserver.com
#     username: admin
#     password:
#       secure: eYKZKFkkEvFYWX6NfjZIVw==
#     folder:
#     application:
#     active_mode: false
#     beta: true      # enable alternative FTP library for 'ftp' and 'ftps' modes
#     debug: true     # show complete FTP log
# 
#     # Amazon S3 deployment provider settings
#   - provider: S3
#     access_key_id:
#       secure: ABcd==
#     secret_access_key:
#       secure: ABcd==
#     bucket: my_bucket
#     folder:
#     artifact:
#     set_public: false
# 
#     # Azure Blob storage deployment provider settings
#   - provider: AzureBlob
#     storage_account_name:
#       secure: ABcd==
#     storage_access_key:
#       secure: ABcd==
#     container: my_container
#     folder:
#     artifact:
# 
#     # Web Deploy deployment provider settings
#   - provider: WebDeploy
#     server: http://www.deploy.com/myendpoint
#     website: mywebsite
#     username: user
#     password:
#       secure: eYKZKFkkEvFYWX6NfjZIVw==
#     ntlm: false
#     remove_files: false
#     app_offline: false
#     do_not_use_checksum: true           # do not use check sum for comparing source and destination files. By default checksums are used.
#     sync_retry_attempts: 2              # sync attempts, max
#     sync_retry_interval: 2000           # timeout between sync attempts, milliseconds
#     aspnet_core: true                   # artifact zip contains ASP.NET Core application
#     aspnet_core_force_restart: true     # poke app's web.config before deploy to force application restart
#     skip_dirs: \\App_Data
#     skip_files: web.config
#     on:
#       branch: release
#       platform: x86
#       configuration: debug
# 
#     # Deploying to Azure Cloud Service
#   - provider: AzureCS
#     subscription_id:
#       secure: fjZIVw==
#     subscription_certificate:
#       secure: eYKZKFkkEv...FYWX6NfjZIVw==
#     storage_account_name: my_storage
#     storage_access_key:
#       secure: ABcd==
#     service: my_service
#     slot: Production
#     target_profile: Cloud
#     artifact: MyPackage.cspkg
# 
#     # Deploying to NuGet feed
#   - provider: NuGet
#     server: https://my.nuget.server/feed
#     api_key:
#       secure: FYWX6NfjZIVw==
#     skip_symbols: false
#     symbol_server: https://your.symbol.server/feed
#     artifact: MyPackage.nupkg
# 
#     # Deploy to GitHub Releases
#   - provider: GitHub
#     artifact: /.*\.nupkg/           # upload all NuGet packages to release assets
#     draft: false
#     prerelease: false
#     on:
#       branch: master                # release from master branch only
#       APPVEYOR_REPO_TAG: true       # deploy on tag push only
#
#     # Deploying to a named environment
#   - provider: Environment
#     name: staging
#     on:
#       branch: staging
#       env_var1: value1
#       env_var2: value2


# scripts to run before deployment
before_deploy:

# scripts to run after deployment
after_deploy:

# to run your custom scripts instead of provider deployments
deploy_script:
 
# to disable deployment
#deploy: off

#---------------------------------#
#        global handlers          #
#---------------------------------#

# on successful build
#on_success:
#  - do something

# on build failure
#on_failure:
#  - do something

# after build failure or success
#on_finish:
#  - do something


#---------------------------------#
#         notifications           #
#---------------------------------#

#notifications:
#
#  # Email
#  - provider: Email
#    to:
#      - user1@email.com
#      - user2@email.com
#    subject: 'Build {{status}}'                  # optional
#    message: "{{message}}, {{commitId}}, ..."    # optional
#    on_build_status_changed: true
#
#  # HipChat
#  - provider: HipChat
#    auth_token:
#      secure: RbOnSMSFKYzxzFRrxM1+XA==
#    room: ProjectA
#    template: "{message}, {commitId}, ..."
#
#  # Slack
#  - provider: Slack
#    incoming_webhook: http://incoming-webhook-url
#
#  # ...or using auth token
#
#  - provider: Slack
#    auth_token:
#      secure: kBl9BlxvRMr9liHmnBs14A==
#    channel: development
#    template: "{message}, {commitId}, ..."
#
#  # Campfire
#  - provider: Campfire
#    account: appveyor
#    auth_token:
#      secure: RifLRG8Vfyol+sNhj9u2JA==
#    room: ProjectA
#    template: "{message}, {commitId}, ..."
#
#  # Webhook
#  - provider: Webhook
#    url: http://www.myhook2.com
#    headers:
#      User-Agent: myapp 1.0
#      Authorization:
#        secure: GhD+5xhLz/tkYY6AO3fcfQ==
#    on_build_success: false
#    on_build_failure: true
#    on_build_status_changed: true
#
